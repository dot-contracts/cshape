<ResourceDictionary 
    
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

  xmlns:local="using:nexus.common.control"
  
  >


    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    
    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    
    <!--<Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
            Margin="15,0,0,0"
            StrokeThickness="1"
            Stroke="#60000000"
            StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style TargetType="local:NxRadio">
        <!-- Basic property defaults -->
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment"   Value="Center" />
        <Setter Property="Padding"            Value="5,0,0,0" />

        <!-- 
        In WPF, you had FocusVisualStyle, SnapsToDevicePixels, 
        and dynamic resource references to SystemColors. 
        Those are removed or replaced with Uno/WinUI equivalents. 
    -->

        <!-- Example: if NxRadio is a custom RadioButton that exposes Value as "IsChecked" -->
        <Setter Property="Value" Value="{Binding Path=Value, RelativeSource={RelativeSource Self}}" />

        <!-- Example custom NxRadio dependency properties: IsReadonly, Prompt, etc. -->
        <Setter Property="IsReadonly"                Value="False" />
        <Setter Property="Prompt"                    Value="Prompt" />
        <Setter Property="PromptHorizontalAlignment" Value="Left" />
        <Setter Property="PromptVerticalAlignment"   Value="Top" />
        <Setter Property="PromptFontFamily"          Value="Arial" />
        <Setter Property="PromptFontSize"            Value="12" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:NxRadio">
                    <!-- 
                    A Grid as the root layout, carrying named visual states. 
                    We also define "RootGrid" here if we want to reference it in storyboards.
                -->
                    <Grid x:Name="RootGrid" Background="Transparent">

                        <!-- 
                        Replace BulletDecorator with a StackPanel or Grid. 
                        We'll place the 'bullet' on the left and the label on the right.
                    -->
                        <StackPanel Orientation="Horizontal">
                            <!-- The "Bullet" area -->
                            <Grid Width="13" Height="13">
                                <Ellipse x:Name="Border"
                                     StrokeThickness="1" 
                                     Stroke="{StaticResource NormalBorderBrush}"
                                     Fill="{StaticResource NormalBrush}" />
                                <Ellipse x:Name="CheckMark"
                                     Margin="3"       
                                     Fill="#444" />
                            </Grid>

                            <!-- The label area -->
                            <local:NxLabel x:Name="label"
                                       Margin="0,-5,0,-10"
                                       PromptHorizontalAlignment="{TemplateBinding PromptHorizontalAlignment}"
                                       PromptVerticalAlignment  ="{TemplateBinding PromptVerticalAlignment}"
                                       Prompt                   ="{TemplateBinding Prompt}"
                                       PromptFontFamily         ="{TemplateBinding PromptFontFamily}"
                                       PromptFontSize           ="{TemplateBinding PromptFontSize}" />
                        </StackPanel>

                        <!-- Visual states for Common (PointerOver, Pressed, Disabled) and Checked/Unchecked -->
                        <VisualStateManager.VisualStateGroups>

                            <!-- 1) COMMON STATES -->
                            <VisualStateGroup x:Name="CommonStates">

                                <VisualState x:Name="Normal" />

                                <VisualState x:Name="PointerOver">
                                    <Storyboard>
                                        <!-- Example: change fill on "Border" -->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                   Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{StaticResource DarkBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                   Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{ThemeResource SystemControlBackgroundBaseLowBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                   Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{ThemeResource SystemControlDisabledBaseLowBrush}" />
                                        </ObjectAnimationUsingKeyFrames>

                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark"
                                                                   Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{ThemeResource SystemControlDisabledBaseMediumLowBrush}" />
                                        </ObjectAnimationUsingKeyFrames>

                                        <!-- Optionally change background on RootGrid -->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid"
                                                                   Storyboard.TargetProperty="(Panel.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{ThemeResource SystemControlDisabledBaseLowBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>

                            <!-- 2) CHECK STATES: e.g., RadioButton states -->
                            <VisualStateGroup x:Name="CheckStates">

                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="CheckMark"
                                        Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames
                                        Storyboard.TargetName="CheckMark"
                                        Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <!-- If NxRadio supports three states -->
                                <VisualState x:Name="Indeterminate" />

                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>